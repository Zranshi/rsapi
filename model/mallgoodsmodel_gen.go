// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	mallGoodsFieldNames          = builder.RawFieldNames(&MallGoods{})
	mallGoodsRows                = strings.Join(mallGoodsFieldNames, ",")
	mallGoodsRowsExpectAutoSet   = strings.Join(stringx.Remove(mallGoodsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	mallGoodsRowsWithPlaceHolder = strings.Join(stringx.Remove(mallGoodsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMallGoodsIdPrefix = "cache:mallGoods:id:"
)

type (
	mallGoodsModel interface {
		Insert(ctx context.Context, data *MallGoods) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*MallGoods, error)
		Update(ctx context.Context, data *MallGoods) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMallGoodsModel struct {
		sqlc.CachedConn
		table string
	}

	MallGoods struct {
		Id          int64          `db:"id"`
		Name        string         `db:"name"`
		Images      string         `db:"images"`
		Description sql.NullString `db:"description"`
		CreateAt    time.Time      `db:"create_at"`
		UpdateAt    time.Time      `db:"update_at"`
	}
)

func newMallGoodsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultMallGoodsModel {
	return &defaultMallGoodsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`mall_goods`",
	}
}

func (m *defaultMallGoodsModel) Delete(ctx context.Context, id int64) error {
	mallGoodsIdKey := fmt.Sprintf("%s%v", cacheMallGoodsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, mallGoodsIdKey)
	return err
}

func (m *defaultMallGoodsModel) FindOne(ctx context.Context, id int64) (*MallGoods, error) {
	mallGoodsIdKey := fmt.Sprintf("%s%v", cacheMallGoodsIdPrefix, id)
	var resp MallGoods
	err := m.QueryRowCtx(ctx, &resp, mallGoodsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", mallGoodsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMallGoodsModel) Insert(ctx context.Context, data *MallGoods) (sql.Result, error) {
	mallGoodsIdKey := fmt.Sprintf("%s%v", cacheMallGoodsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, mallGoodsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Images, data.Description)
	}, mallGoodsIdKey)
	return ret, err
}

func (m *defaultMallGoodsModel) Update(ctx context.Context, data *MallGoods) error {
	mallGoodsIdKey := fmt.Sprintf("%s%v", cacheMallGoodsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, mallGoodsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Images, data.Description, data.Id)
	}, mallGoodsIdKey)
	return err
}

func (m *defaultMallGoodsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMallGoodsIdPrefix, primary)
}

func (m *defaultMallGoodsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", mallGoodsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMallGoodsModel) tableName() string {
	return m.table
}
