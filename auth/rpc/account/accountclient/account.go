// Code generated by goctl. DO NOT EDIT.
// Source: account.proto

package accountclient

import (
	"context"

	"rsapi/auth/rpc/account/account"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	EditReq     = account.EditReq
	EditRes     = account.EditRes
	InfoReq     = account.InfoReq
	InfoRes     = account.InfoRes
	LoginReq    = account.LoginReq
	LoginRes    = account.LoginRes
	LogoutReq   = account.LogoutReq
	LogoutRes   = account.LogoutRes
	RegisterReq = account.RegisterReq
	RegisterRes = account.RegisterRes
	SignOutReq  = account.SignOutReq
	SignOutRes  = account.SignOutRes

	Account interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error)
		Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutRes, error)
		Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoRes, error)
		Edit(ctx context.Context, in *EditReq, opts ...grpc.CallOption) (*EditRes, error)
		Signout(ctx context.Context, in *SignOutReq, opts ...grpc.CallOption) (*SignOutRes, error)
	}

	defaultAccount struct {
		cli zrpc.Client
	}
)

func NewAccount(cli zrpc.Client) Account {
	return &defaultAccount{
		cli: cli,
	}
}

func (m *defaultAccount) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultAccount) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultAccount) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutRes, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}

func (m *defaultAccount) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoRes, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.Info(ctx, in, opts...)
}

func (m *defaultAccount) Edit(ctx context.Context, in *EditReq, opts ...grpc.CallOption) (*EditRes, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.Edit(ctx, in, opts...)
}

func (m *defaultAccount) Signout(ctx context.Context, in *SignOutReq, opts ...grpc.CallOption) (*SignOutRes, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.Signout(ctx, in, opts...)
}
