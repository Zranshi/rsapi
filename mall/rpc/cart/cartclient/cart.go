// Code generated by goctl. DO NOT EDIT.
// Source: cart.proto

package cartclient

import (
	"context"

	"rsapi/mall/rpc/cart/cart"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CartItem = cart.CartItem
	ListReq  = cart.ListReq
	ListRes  = cart.ListRes
	PopReq   = cart.PopReq
	PopRes   = cart.PopRes
	PushReq  = cart.PushReq
	PushRes  = cart.PushRes

	Cart interface {
		Push(ctx context.Context, in *PushReq, opts ...grpc.CallOption) (*PushRes, error)
		Pop(ctx context.Context, in *PopReq, opts ...grpc.CallOption) (*PopRes, error)
		List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListRes, error)
	}

	defaultCart struct {
		cli zrpc.Client
	}
)

func NewCart(cli zrpc.Client) Cart {
	return &defaultCart{
		cli: cli,
	}
}

func (m *defaultCart) Push(ctx context.Context, in *PushReq, opts ...grpc.CallOption) (*PushRes, error) {
	client := cart.NewCartClient(m.cli.Conn())
	return client.Push(ctx, in, opts...)
}

func (m *defaultCart) Pop(ctx context.Context, in *PopReq, opts ...grpc.CallOption) (*PopRes, error) {
	client := cart.NewCartClient(m.cli.Conn())
	return client.Pop(ctx, in, opts...)
}

func (m *defaultCart) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListRes, error) {
	client := cart.NewCartClient(m.cli.Conn())
	return client.List(ctx, in, opts...)
}
