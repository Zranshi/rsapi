// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	mallCartFieldNames          = builder.RawFieldNames(&MallCart{})
	mallCartRows                = strings.Join(mallCartFieldNames, ",")
	mallCartRowsExpectAutoSet   = strings.Join(stringx.Remove(mallCartFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	mallCartRowsWithPlaceHolder = strings.Join(stringx.Remove(mallCartFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMallCartIdPrefix = "cache:mallCart:id:"
)

type (
	mallCartModel interface {
		Insert(ctx context.Context, data *MallCart) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*MallCart, error)
		Update(ctx context.Context, data *MallCart) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMallCartModel struct {
		sqlc.CachedConn
		table string
	}

	MallCart struct {
		Id       int64     `db:"id"`
		UserId   int64     `db:"user_id"`
		GoodsId  int64     `db:"goods_id"`
		Count    int64     `db:"count"`
		CreateAt time.Time `db:"create_at"`
		UpdateAt time.Time `db:"update_at"`
	}
)

func newMallCartModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultMallCartModel {
	return &defaultMallCartModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`mall_cart`",
	}
}

func (m *defaultMallCartModel) Delete(ctx context.Context, id int64) error {
	mallCartIdKey := fmt.Sprintf("%s%v", cacheMallCartIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, mallCartIdKey)
	return err
}

func (m *defaultMallCartModel) FindOne(ctx context.Context, id int64) (*MallCart, error) {
	mallCartIdKey := fmt.Sprintf("%s%v", cacheMallCartIdPrefix, id)
	var resp MallCart
	err := m.QueryRowCtx(ctx, &resp, mallCartIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", mallCartRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMallCartModel) Insert(ctx context.Context, data *MallCart) (sql.Result, error) {
	mallCartIdKey := fmt.Sprintf("%s%v", cacheMallCartIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, mallCartRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.GoodsId, data.Count)
	}, mallCartIdKey)
	return ret, err
}

func (m *defaultMallCartModel) Update(ctx context.Context, data *MallCart) error {
	mallCartIdKey := fmt.Sprintf("%s%v", cacheMallCartIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, mallCartRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.GoodsId, data.Count, data.Id)
	}, mallCartIdKey)
	return err
}

func (m *defaultMallCartModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMallCartIdPrefix, primary)
}

func (m *defaultMallCartModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", mallCartRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMallCartModel) tableName() string {
	return m.table
}
