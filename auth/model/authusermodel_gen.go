// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	authUserFieldNames          = builder.RawFieldNames(&AuthUser{})
	authUserRows                = strings.Join(authUserFieldNames, ",")
	authUserRowsExpectAutoSet   = strings.Join(stringx.Remove(authUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	authUserRowsWithPlaceHolder = strings.Join(stringx.Remove(authUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAuthUserIdPrefix    = "cache:authUser:id:"
	cacheAuthUserEmailPrefix = "cache:authUser:email:"
)

type (
	authUserModel interface {
		Insert(ctx context.Context, data *AuthUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AuthUser, error)
		FindOneByEmail(ctx context.Context, email string) (*AuthUser, error)
		Update(ctx context.Context, data *AuthUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAuthUserModel struct {
		sqlc.CachedConn
		table string
	}

	AuthUser struct {
		Id       int64     `db:"id"`        // user table id
		Email    string    `db:"email"`     // user email, unique for visible user
		Key      string    `db:"key"`       // hashed key with private salt
		Name     string    `db:"name"`      // user display name
		CreateAt time.Time `db:"create_at"` // create time
		UpdateAt time.Time `db:"update_at"` // update time
	}
)

func newAuthUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAuthUserModel {
	return &defaultAuthUserModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`auth_user`",
	}
}

func (m *defaultAuthUserModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	authUserEmailKey := fmt.Sprintf("%s%v", cacheAuthUserEmailPrefix, data.Email)
	authUserIdKey := fmt.Sprintf("%s%v", cacheAuthUserIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, authUserEmailKey, authUserIdKey)
	return err
}

func (m *defaultAuthUserModel) FindOne(ctx context.Context, id int64) (*AuthUser, error) {
	authUserIdKey := fmt.Sprintf("%s%v", cacheAuthUserIdPrefix, id)
	var resp AuthUser
	err := m.QueryRowCtx(ctx, &resp, authUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", authUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAuthUserModel) FindOneByEmail(ctx context.Context, email string) (*AuthUser, error) {
	authUserEmailKey := fmt.Sprintf("%s%v", cacheAuthUserEmailPrefix, email)
	var resp AuthUser
	err := m.QueryRowIndexCtx(ctx, &resp, authUserEmailKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", authUserRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, email); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAuthUserModel) Insert(ctx context.Context, data *AuthUser) (sql.Result, error) {
	authUserEmailKey := fmt.Sprintf("%s%v", cacheAuthUserEmailPrefix, data.Email)
	authUserIdKey := fmt.Sprintf("%s%v", cacheAuthUserIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, authUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Email, data.Key, data.Name)
	}, authUserEmailKey, authUserIdKey)
	return ret, err
}

func (m *defaultAuthUserModel) Update(ctx context.Context, newData *AuthUser) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	authUserEmailKey := fmt.Sprintf("%s%v", cacheAuthUserEmailPrefix, data.Email)
	authUserIdKey := fmt.Sprintf("%s%v", cacheAuthUserIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, authUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Email, newData.Key, newData.Name, newData.Id)
	}, authUserEmailKey, authUserIdKey)
	return err
}

func (m *defaultAuthUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAuthUserIdPrefix, primary)
}

func (m *defaultAuthUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", authUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAuthUserModel) tableName() string {
	return m.table
}
