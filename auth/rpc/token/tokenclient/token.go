// Code generated by goctl. DO NOT EDIT.
// Source: token.proto

package tokenclient

import (
	"context"

	"rsapi/auth/rpc/token/token"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GenerateReq = token.GenerateReq
	GenerateRes = token.GenerateRes
	InvalidReq  = token.InvalidReq
	InvalidRes  = token.InvalidRes
	VerifyReq   = token.VerifyReq
	VerifyRes   = token.VerifyRes

	Token interface {
		Generate(ctx context.Context, in *GenerateReq, opts ...grpc.CallOption) (*GenerateRes, error)
		Verify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyRes, error)
		Invalid(ctx context.Context, in *InvalidReq, opts ...grpc.CallOption) (*InvalidRes, error)
	}

	defaultToken struct {
		cli zrpc.Client
	}
)

func NewToken(cli zrpc.Client) Token {
	return &defaultToken{
		cli: cli,
	}
}

func (m *defaultToken) Generate(ctx context.Context, in *GenerateReq, opts ...grpc.CallOption) (*GenerateRes, error) {
	client := token.NewTokenClient(m.cli.Conn())
	return client.Generate(ctx, in, opts...)
}

func (m *defaultToken) Verify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyRes, error) {
	client := token.NewTokenClient(m.cli.Conn())
	return client.Verify(ctx, in, opts...)
}

func (m *defaultToken) Invalid(ctx context.Context, in *InvalidReq, opts ...grpc.CallOption) (*InvalidRes, error) {
	client := token.NewTokenClient(m.cli.Conn())
	return client.Invalid(ctx, in, opts...)
}
